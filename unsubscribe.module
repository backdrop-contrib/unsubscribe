<?php

/**
 * @file
 * Provide basic functions for unsubscribing from email communications.
 */

/**
 * Implements hook_menu().
 */
function unsubscribe_menu() {
  $items['unsubscribe'] = array(
    'title' => 'Unsubscribe',
    'description' => 'Unsubscribe from all email notifications',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unsubscribe_unsubscribe_form'),
    'access arguments' => array('unsubscribe add'),
    'file' => 'unsubscribe.pages.inc',
    'access callback' => TRUE,
  );
  $items['admin/config/people/unsubscribe'] = array(
    'title' => 'Unsubscribe',
    'description' => 'Configure settings for the unsubscribe module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unsubscribe_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'unsubscribe.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function unsubscribe_permission() {
  return array(
    'unsubscribe add' => array(
      'title' => t('Unsubscribe'),
      'description' => t('Unsubscribe from email communication.'),
    ),
    'unsubscribe remove' => array(
      'title' => t('Unsubscribe'),
      'description' => t('Unsubscribe from email communication.'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function unsubscribe_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'unsubscribe'),
  );
}

/**
 * Implements hook_form_alter().
 */
function unsubscribe_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_profile_form':
      $form['unsubscribe'] = array(
        '#type' => 'checkbox',
        '#title' => t('Unsubscribe from emails'),
        '#description' => t('Checking this box will unsusbscribe you from all automated email communications.'),
        '#default_value' => unsubscribe_user_check($form['#user']),
      );
      $form['#submit'][] = 'unsubscribe_user_profile_form_submit';
      break;
  }
}

/**
 * Callback for user_profile_form.
 */
function unsubscribe_user_profile_form_submit($form, &$form_state) {
  // Unsubscribe user.
  if ($form_state['values']['unsubscribe']) {
    unsubscribe_user_add($form['#user']);
  }
  // Resubscribe user.
  else {
    unsubscribe_user_remove($form['#user']);
  }
}

/**
 * Implements hook_mail_alter().
 */
function unsubscribe_mail_alter(&$message) {
  static $exemptions, $block;

  // Messages sent by these modules will not be aborted.
  $exemptions = array_filter(variable_get('unsubscribe_exempt_modules', drupal_map_assoc(array('system', 'user'))), 'is_string');

  // Allow for $exemptions array to be altered by other modules.
  drupal_alter('unsubscribe_exemptions', $exemptions);

  // We rely on the 'account' parameter being set.
  if (!in_array($message['module'], $exemptions) && !empty($message['params']['account'])) {
    $account = $message['params']['account'];
    // If this user is on the unsubscribe list, abort the email!
    if (unsubscribe_user_check($account)) {
      $message['send'] = FALSE;
    }
  }

  // Since module_invoke_all() does not allow variables to be passed by reference, we use this.
  foreach (module_implements('unsubscribe_override') as $module) {
    $function = $module . '_unsubscribe_override';
    $function($message);
  }
}

/**
 * Implements hook_user_delete().
 */
function unsubscribe_user_delete($account) {
  unsubscribe_user_remove($account);
}

/**
 * Implements hook_user_operations().
 */
function unsubscribe_user_operations() {
  $operations = array(
    'unsubscribe_user_add' => array(
      'label' => t('Add to unsubscribe list'),
      'callback' => 'unsubscribe_user_bulk_add_remove',
      'callback arguments' => array('add'),
    ),
    'unsubscribe_user_remove' => array(
      'label' => t('Remove from unsubscribe list'),
      'callback' => 'unsubscribe_user_bulk_add_remove',
      'callback arguments' => array('remove'),
    ),
  );
  return $operations;
}

/**
 * Bulk add users to unsubscribe list. Used by unsubscribe_user_operations().
 *
 * @param $account
 *   An array of user IDs.
 *
 * @return
 *   Multidimensional array of return data including user IDs and responses.
 */
function unsubscribe_user_bulk_add_remove($accounts, $action) {
  $return = array();
  foreach ($accounts as $uid) {
    $account = user_load((int)$uid);
    if ($account !== FALSE) {
      $return[] = array(
        'uid' => $uid,
        'response' => $action == 'add' ? unsubscribe_user_add($account) : unsubscribe_user_remove($account),
      );
    }
    else {
      drupal_set_message(t('There was a problem loading account %uid', array('%uid' => $uid)));
    }
  }
  return $return;
}

/**
 * Implements hook_action_info().
 */
function unsubscribe_action_info() {
  return array(
    'unsubscribe_user_add_action' => array(
      'label' => t('Add to unsubscribe list'),
      'type' => 'user',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'unsubscribe_user_remove_action' => array(
      'label' => t('Remove from unsubscribe list'),
      'type' => 'user',
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Action function for unsubscribe_add_action.
 *
 * @param $entity
 *   The user object being acted upon.
 * @param $context
 *   Array with parameters for this action: depends on the trigger.
 */
function unsubscribe_user_add_action(&$account, $context = array()) {
  unsubscribe_user_add($account);
}

/**
 * Action function for unsubscribe_remove_action.
 *
 * @param $entity
 *   The user object being acted upon.
 * @param $context
 *   Array with parameters for this action: depends on the trigger.
 */
function unsubscribe_user_remove_action(&$account, $context = array()) {
  unsubscribe_user_remove($account);
}

/**
 * Check to see if a user is on the unsubscribe list.
 *
 */
function unsubscribe_user_check($account) {
  if (!is_object($account)) {
    user_load($account);
  }

  $query = db_select('users', 'u');
  $query->condition('u.uid', $account->uid);
  $query->leftJoin('unsubscribe', 'us', 'u.uid = us.uid');
  $query->addExpression("COUNT(us.uid)", 'uid_count');
  $result = $query->execute()->fetchField();

  return $result;
}

/**
 * Add user to unsubscribe list.
 */
function unsubscribe_user_add($account) {
  if (!is_object($account)) {
    user_load($account);
  }

  // I don't like adding this check here, but the check should be done in a central place.
  if (!unsubscribe_user_check($account)) {

    // Integrate with the rules module, see unsubscribe.rules.inc.
    if (module_exists('rules')) {
      rules_invoke_event('unsubscribe_user_added', $account);
    }

    // Down to business.
    db_insert('unsubscribe')->fields(array(
        'uid' => $account->uid,
        'timestamp' => REQUEST_TIME,
      ))->execute();
  }
}

/**
 * Remove user from unsubscribe list.
 */
function unsubscribe_user_remove($account) {
  if (!is_object($account)) {
    user_load($account);
  }

  // Integrate with the rules module, see unsubscribe.rules.inc.
  if (module_exists('rules')) {
    rules_invoke_event('unsubscribe_user_removed', $account->uid);
  }
  db_delete('unsubscribe')->condition('uid', $account->uid)->execute();
}

